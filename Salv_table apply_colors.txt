*&---------------------------------------------------------------------*
*& Report ztest_oo_alv_main
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ztest_oo_alv_main.

class lcl_report DEFINITION.

    PUBLIC SECTION.

        TYPES:BEGIN OF ty_vbak,
              vbeln TYPE vbak-vbeln,
              erdat type erdat,
              auart type auart,
              kunnr type kunnr,
              t_color TYPE lvc_t_scol,
              END OF TY_VBAK.

       TYPES: ty_t_vbak TYPE STANDARD TABLE OF ty_vbak.

       data: t_vbak type STANDARD TABLE OF ty_vbak.

       data: o_alv type REF TO cl_salv_table.

       METHODS:
        get_data,
        generate_output.

    PRIVATE SECTION.
        METHODS:
            set_pf_status changing co_alv TYPE REF TO cl_salv_table,
            set_layout changing co_alv type REF TO cl_salv_table,
            set_display_setting changing co_alv type ref TO cl_salv_table,
            set_columns changing co_alv TYPE REF TO cl_salv_table,
            set_hotspot_vbeln changing co_alv TYPE REF TO cl_salv_table
                                       co_report TYPE REF TO lcl_report,
            on_link_click for EVENT link_click of cl_salv_events_table importing row column,
            set_colors changing co_alv TYPE REF TO cl_salv_table
                                ct_vbak type ty_t_vbak.


ENDCLASS.

START-OF-SELECTION.
    data: lo_report type ref to lcl_report.

    create OBJECT lo_report.

    lo_report->get_data( ).
    lo_report->generate_output( ).

CLASS lcl_report implementation.

    METHOD get_data.

        select vbeln erdat auart kunnr
                into CORRESPONDING FIELDS OF table t_vbak FROM vbak UP TO 20 rows.

    ENDMETHOD.

    METHOD generate_output.

        data: lx_msg type REF TO cx_salv_msg.
        try.
            cl_salv_table=>factory(
                IMPORTING
                    r_salv_table = o_alv
                CHANGING
                    t_table = t_vbak
            ).
            CATCH cx_salv_msg into lx_msg.
        ENDTRY.

        call METHOD set_pf_status CHANGING co_alv = o_alv.

        call METHOD set_layout CHANGING co_alv = o_alv.

        call METHOD set_display_setting changing co_alv = o_alv.

        call METHOD set_columns CHANGING co_alv = o_alv.

        call METHOD set_hotspot_vbeln CHANGING co_alv = o_alv
                                               co_report = lo_report.

        call METHOD set_colors CHANGING co_alv = o_alv
                                        ct_vbak = t_vbak.

        o_alv->display( ).

    ENDMETHOD.

    METHOD set_pf_status.

        data: lo_functions TYPE REF TO cl_salv_functions_list.

        lo_functions = co_alv->get_functions( ).
        lo_functions->set_default( abap_true ).

        co_alv->set_screen_status(
        pfstatus = 'SALV_STANDARD'
        report = 'SALV_DEMO_TABLE_SELECTIONS'
        set_functions = co_alv->c_functions_all
        ).
    ENDMETHOD.

    METHOD set_layout.
        data: lo_layout TYPE REF TO cl_salv_layout,
              lf_variant type slis_vari,
              ls_key type salv_s_layout_key.

        lo_layout = co_alv->get_layout( ).

        ls_key-report = sy-repid.
        lo_layout->set_key( ls_key ).
        lo_layout->set_save_restriction( if_salv_c_layout=>restrict_none ).

        lf_variant = 'DEFAULT'.
        lo_layout->set_initial_layout( lf_variant ).
    ENDMETHOD.

    METHOD set_display_setting.

        data: lo_display TYPE REF TO cl_salv_display_settings.

              lo_display = co_alv->get_display_settings( ).

              lo_display->set_striped_pattern( 'X' ).

              lo_display->set_list_header( 'ALV Test for Display Settings' ).

    ENDMETHOD.

    METHOD set_columns.

        data: lo_cols TYPE REF TO cl_salv_columns.

        lo_cols = o_alv->get_columns( ).

        lo_cols->set_optimize( 'X' ).

        DATA:lo_column TYPE REF TO cl_salv_column.

        try.
            lo_column = lo_cols->get_column( 'KUNNR').
            lo_column->set_long_text( '售达方' ).
            lo_column->set_medium_text( '售达方' ).
            lo_column->set_short_text( '售达方' ).
            lo_column->set_output_length( 10 ).

            lo_column = lo_cols->get_column( 'AUART').
            lo_column->set_long_text( '销售凭证类型' ).
            lo_column->set_medium_text( '销售凭证类型' ).
            lo_column->set_short_text( '销售凭证类型' ).
            lo_column->set_output_length( 10 ).

            lo_column = lo_cols->get_column( 'VBELN').
            lo_column->set_long_text( '销售凭证' ).
            lo_column->set_medium_text( '销售凭证' ).
            lo_column->set_short_text( '销售凭证' ).
            lo_column->set_output_length( 10 ).

            lo_column = lo_cols->get_column( 'ERDAT').
            lo_column->set_long_text( '凭证创建日期' ).
            lo_column->set_medium_text( '凭证创建日期' ).
            lo_column->set_short_text( '创建日期' ).
            lo_column->set_output_length( 10 ).
          CATCH cx_salv_not_found.
        ENDTRY.

    ENDMETHOD.

    METHOD set_hotspot_vbeln.

        data: lo_cols_tab TYPE REF TO cl_salv_columns_table,
              lo_col_tab type REF TO cl_salv_column_table.

        lo_cols_tab = co_alv->get_columns( ).

        try.
            lo_col_tab ?= lo_cols_tab->get_column( 'VBELN' ).
            CATCH cx_salv_not_found.
        ENDTRY.

        try.
            call METHOD lo_col_tab->set_cell_type
                EXPORTING
                    value = if_salv_c_cell_type=>hotspot.
                CATCH cx_salv_data_error.
        ENDTRY.

        data:lo_events TYPE REF TO cl_salv_events_table.

        lo_events = o_alv->get_event( ).

        set HANDLER co_report->on_link_click for lo_events.

    ENDMETHOD.

    METHOD on_link_click.

        data:la_vbak type ty_vbak.

        read TABLE lo_report->t_vbak into la_vbak index row.

        if la_vbak-vbeln is NOT INITIAL.
            MESSAGE i398(00) with 'You have selected' la_vbak-vbeln.
        ENDIF.
    ENDMETHOD.

    METHOD set_colors.

        data: lo_cols_tab TYPE REF TO cl_salv_columns_table,
              lo_col_tab type REF TO cl_salv_column_table.
        data: ls_color type lvc_s_colo.

        lo_cols_tab = co_alv->get_columns( ).

        INCLUDE <color>.

        try.
            lo_col_tab ?= lo_cols_tab->get_column( 'ERDAT' ).
            ls_color-col = col_total.
            lo_col_tab->set_color( ls_color ).
            CATCH cx_salv_not_found.
        ENDTRY.

        data: lt_s_color type lvc_t_scol,
              ls_s_color type lvc_s_scol,
              la_vbak like LINE OF ct_vbak,
              l_count type i.

        loop at ct_vbak into la_vbak.
            l_count = l_count + 1.
            case l_count.
                when 3.
                    ls_s_color-fname = 'AUART'.
                    ls_s_color-color-col = col_negative.
                    ls_s_color-color-int = 0.
                    ls_s_color-color-inv = 0.
                    APPEND ls_s_color to lt_s_color.
                    clear ls_s_color.

                when 5.
                    ls_s_color-color-col = col_positive.
                    ls_s_color-color-int = 0.
                    ls_s_color-color-inv = 0.
                    APPEND ls_s_color to lt_s_color.
                    clear ls_s_color.
            ENDCASE.

            la_vbak-t_color = lt_s_color.
            MODIFY ct_vbak from la_vbak.
            clear la_vbak.
            clear lt_s_color.
        ENDLOOP.

        try.
            lo_cols_tab->set_color_column( 'T_COLOR' ).
            CATCH cx_salv_data_error.
        ENDTRY.
    ENDMETHOD.

ENDCLASS.