*&---------------------------------------------------------------------*
*& Report ztest_oo_alv_aggr
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ztest_oo_alv_aggr.

class lcl_report DEFINITION.

    PUBLIC SECTION.
        TYPES: BEGIN OF ty_vbak,
               vbeln type vbak-vbeln,
               erdat type erdat,
               auart type auart,
               kunnr type kunnr,
               netwr type netwr,
               check TYPE flag,
               END OF TY_VBAK.

    TYPES: ty_t_vbak type STANDARD TABLE OF ty_vbak.

    data:t_vbak type STANDARD TABLE OF ty_vbak.

    data: o_alv TYPE REF TO cl_salv_table.

    METHODS:
        get_data,
        generate_output.

    PRIVATE SECTION.
        METHODS:
            set_pf_status
                changing co_alv TYPE REF TO cl_salv_table,
            set_aggregations
                changing co_alv TYPE REF TO cl_salv_table,
            set_filters
                changing co_alv TYPE REF TO cl_salv_table,
            set_sorts
                changing co_alv TYPE REF TO cl_salv_table.

ENDCLASS.

class lcl_event_handler DEFINITION.

    PUBLIC SECTION.
        METHODS:
            on_link_click for EVENT link_click of cl_salv_events_table
                importing row column.

ENDCLASS.

START-OF-SELECTION.
    data: lo_report type REF TO lcl_report.

    create OBJECT lo_report.

    lo_report->get_data( ).

    lo_report->generate_output( ).

class lcl_report IMPLEMENTATION.

    METHOD get_data.

        select vbeln erdat auart kunnr netwr
               into CORRESPONDING FIELDS OF table t_vbak
               from vbak.


    ENDMETHOD.

    METHOD generate_output.

        data: lx_msg TYPE REF TO cx_salv_msg.
        try.
            cl_salv_table=>factory(
                IMPORTING
                    r_salv_table = o_alv
                CHANGING
                    t_table = t_vbak
            ).
            CATCH cx_salv_msg into lx_msg.
        ENDTRY.

        data: lo_cols TYPE REF TO cl_salv_columns.
              lo_cols = o_alv->get_columns( ).

              lo_cols->set_optimize( 'X' ).

        DATA: lo_column TYPE REF TO cl_salv_column_list.

              try.
                lo_column ?= lo_cols->get_column( 'CHECK' ).
                lo_column->set_cell_type( if_salv_c_cell_type=>checkbox_hotspot ).
                lo_column->set_output_length( 10 ).
                CATCH cx_salv_not_found.
              ENDTRY.

        data: lo_events type REF TO cl_salv_events_table.
              lo_events = o_alv->get_event( ).

        data:lo_event_handler TYPE REF TO lcl_event_handler.

             create OBJECT lo_event_handler.

             set HANDLER lo_event_handler->on_link_click for lo_events.

        CAll METHOD set_pf_status CHANGING co_alv = o_alv.

        CALL METHOD set_aggregations CHANGING co_alv = o_alv.

        call METHOD set_filters CHANGING co_alv = o_alv.

*        call METHOD set_sorts CHANGING co_alv = o_alv.

        o_alv->display( ).

    ENDMETHOD.

    METHOD set_pf_status.

        data: lo_functions TYPE REF TO cl_salv_functions_list.

              lo_functions = co_alv->get_functions( ).
              lo_functions->set_default( abap_true ).

    ENDMETHOD.

    METHOD set_aggregations.

        data: lo_aggrs TYPE REF TO cl_salv_aggregations.

              lo_aggrs = co_alv->get_aggregations( ).

              try.
                call METHOD lo_aggrs->add_aggregation
                        EXPORTING
                            columnname = 'NETWR'
                            aggregation = if_salv_c_aggregation=>total.
                CATCH cx_salv_data_error.
                CATCH cx_salv_not_found.
                CATCH cx_salv_existing.
              ENDTRY.

              lo_aggrs->set_numerical_aggregation( ).

    ENDMETHOD.

    METHOD set_filters.

        data: lo_filters type REF TO cl_salv_filters.

              lo_filters = co_alv->get_filters( ).

              try.
                call METHOD lo_filters->add_filter
                    EXPORTING
                        columnname = 'ERDAT'
                        sign = 'I'
                        option = 'EQ'
                        low = '20171008'
*                        high =
                .
                CATCH cx_salv_data_error.
                CATCH cx_salv_not_found.
                CATCH cx_salv_existing.
              ENDTRY.

    ENDMETHOD.

    METHOD set_sorts.

        data: lo_sort type REF TO cl_salv_sorts.

              lo_sort = co_alv->get_sorts( ).

              try.
                call METHOD lo_sort->add_sort
                    EXPORTING
                        columnname = 'AUART'
                        subtotal = if_salv_c_bool_sap=>true.
                    CATCH cx_salv_data_error.
                    CATCH cx_salv_not_found.
                    CATCH cx_salv_existing.
              ENDTRY.

    ENDMETHOD.

ENDCLASS.

CLASS lcl_event_handler IMPLEMENTATION.

    METHOD on_link_click.

        field-symbols:<lfa_data> like LINE OF lo_report->t_vbak.

        read TABLE lo_report->t_vbak ASSIGNING <lfa_data> INDEX row.

        CHECK sy-subrc is INITIAL.
        if <lfa_data>-check is INITIAL.
            <lfa_data>-check = 'X'.
        ELSE.
            CLEAR <LFA_DATA>-check.
        ENDIF.
        lo_report->o_alv->refresh( ).

    ENDMETHOD.

ENDCLASS.